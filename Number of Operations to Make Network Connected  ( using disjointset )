
class DisjointSet{
       public: 
           vector<int> size , parent;
           DisjointSet(int n){
               size.resize(n+1);
               parent.resize(n+1);
               for(int i=0;i<=n;i++)
               {
                 parent[i]=i;
                 size[i]=1;
               }
           }

           int findpar(int node){
               if(node == parent[node])  return node;
               return parent[node] = findpar(parent[node]);
           }

           void unionBySize(int u , int v){
              int ult_u = findpar(u);
              int ult_v = findpar(v);

              if(ult_u == ult_v)  return;
              if(size[ult_u]<size[ult_v])
              {
                parent[ult_u] = ult_v;
                size[ult_v] += size[ult_u];
              }else{
                parent[ult_v] = ult_u;
                size[ult_u] += size[ult_v];
              }
           }
};


class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& edge) {

              DisjointSet ds(n);
              int cntExtras = 0;
              for (auto it : edge){
                 int u = it[0];
                 int v = it[1];
                 if(ds.findpar(u) == ds.findpar(v))
                 {
                       cntExtras++;
                 }else{
                       ds.unionBySize(u,v);
                 }
              }

              int cntc = 0;
              for(int i=0;i<n;i++)
              {
                  if(ds.parent[i] == i) cntc++;
              }
              int ans = cntc-1;
              if(cntExtras >= ans) return ans;
              return -1;
        
    }
};

